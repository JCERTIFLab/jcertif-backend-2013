#####################################################################################
#
# SecureSocial 2 Settings
#
#####################################################################################

backend {
	host="http://jcertif-backend.roddet.cloudbees.net"
}

smtp {
	host=smtp.gmail.com
	port=465
	ssl=true
	tls=true
	user=jcertif2013.debug
	password=jcertifdebug2013
	from="no-reply@jcertif.com"
}

securesocial {
        #
        # If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
        #
        #bootstrapCssPath="your path"
 

        #
        # If enabled, sets the Favicon to display when in SecureSocial pages
        #
        #faviconPath="your path"
  

        #
        # If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
        #
        jqueryPath=javascripts/jquery-1.9.1.min.js


        #
        # If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations
        # If you want to do major changes, please read about custom templates in SecureSocial
        #
        #customCssPath="your path"

	#
	# Where to redirect the user if SecureSocial can't figure that out from
	# the request that led the use to the login page
	#
	onLoginGoTo=/

	#
	# Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
	#
	onLogoutGoTo=/home

	#
	# Enable SSL for oauth callback urls, login/signup/password recovery pages and the authenticator cookie
	#
	ssl=false


	#
	# Parameters for the cookie used to track users.
	#	
	cookie {
		# 
		# The cookie name (defaults to 'id')
		#name=id

		#
		# The path for which the cookie should be sent by the browser (defaults to /)
		#
		#path=/

		#
		# The domain for which the cookie should be sent (it is left empty by default)
		#
		#domain=some_domain

		#
		# If set to true, the cookie is not readable by a client side script (defaults to true).
		#
		#httpOnly=true

		#
	        # The amount of time the session id will remain valid since the last request
		#
		idleTimeoutInMinutes=30

		#
		# The amount of time the session id will be valid since the user authenticated. 
		# After this the user will need to re-authenticate
		#
		absoluteTimeOutInMinutes=720
		
		#
		#Makes the cookie transient (defaults to true). Transient cookie are recommended because 
		#the cookie dissapears when the browser is closed.  If set to false, the cookie will 
		#survive browser restarts and the user won't need to login again (as long as the idle 
		#and absolute timeouts have not been passed).
		#
		#makeTransient = true
	}

	twitter {
		requestTokenUrl="https://twitter.com/oauth/request_token"
		accessTokenUrl="https://twitter.com/oauth/access_token"
		authorizationUrl="https://twitter.com/oauth/authenticate"
		consumerKey=your_consumer_key
		consumerSecret=your_consumer_secret
	}

	facebook {
		authorizationUrl="https://graph.facebook.com/oauth/authorize"
		accessTokenUrl="https://graph.facebook.com/oauth/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
		# this scope is the minimum SecureSocial requires.  You can add more if required by your app.
		scope=email
	}

	google {
		authorizationUrl="https://accounts.google.com/o/oauth2/auth"
		accessTokenUrl="https://accounts.google.com/o/oauth2/token"
		clientId=854354618002.apps.googleusercontent.com
		clientSecret=j-8DT2skEfOtVRWW6f5fi1cI
		scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
	}

	linkedin {
		requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken"
		accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
		authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
		consumerKey=your_consumer_key
		consumerSecret=your_consumer_secret
	}
    	
	github {
		authorizationUrl="https://github.com/login/oauth/authorize"
		accessTokenUrl="https://github.com/login/oauth/access_token"
		clientId=b8b90b37e06f6e85136a
		clientSecret="ae5dd022f5660855b3695c0740707cef80da4aa2"
	}

    instagram {
        authorizationUrl="https://api.instagram.com/oauth/authorize"
		accessTokenUrl="https://api.instagram.com/oauth/access_token"
		clientId=your_client_id
		clientSecret=your_client_secret
	}

	userpass {
		#
		# Enable username support, otherwise SecureSocial will use the emails as user names
		#
		withUserNameSupport=false
	    sendWelcomeEmail=false
	    enableGravatarSupport=true
	    signupSkipLogin=true
	    tokenDuration=60
	    tokenDeleteInterval=5
	    minimumPasswordLength=7
	    enableTokenJob=true
	    hasher=nop
	}
}