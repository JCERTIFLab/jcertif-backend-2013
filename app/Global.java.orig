import models.exception.ExceptionHandler;
import play.Application;
import play.GlobalSettings;
import play.Logger;
<<<<<<< HEAD
import play.mvc.Action;
=======
import play.Play;
>>>>>>> [Service]: Rajout dans l'action JCertifContextAction de la gestion des
import play.mvc.Http;
import play.mvc.Http.RequestHeader;
import play.mvc.Result;
import play.mvc.Results;

import java.lang.reflect.Method;

/**
 * <p>Cette classe est un handler global Ã  l'application</p>
 * 
 * @author Martial SOMDA
 *
 */
public class Global extends GlobalSettings {

	@Override
	public void onStart(Application application) {
		Logger.info("JCertif Backend Application running");
		super.onStart(application);
	}
	
	@Override
	public void onStop(Application application) {
		Logger.info("JCertif Backend Application shutdown...");
		super.onStop(application);
	}
<<<<<<< HEAD


    @Override
    public Action onRequest(Http.Request request, Method method) {
        return new RequestWrapper(super.onRequest(request, method));
    }

    @Override
=======
	
	@Override
>>>>>>> [Service]: Rajout dans l'action JCertifContextAction de la gestion des
	public Result onError(RequestHeader requestHeader, Throwable throwable) {
		Logger.info("JCertif Backend onError Global Handler");
<<<<<<< HEAD
		Result result = Results.status(Http.Status.INTERNAL_SERVER_ERROR, throwable.getMessage());
		if(throwable.getCause() instanceof JCertifException
				&& throwable.getCause().getClass().isAnnotationPresent(JcertifHttpMapping.class)){

			JcertifHttpMapping mapped = throwable.getCause().getClass().getAnnotation(JcertifHttpMapping.class);
			
			result = Results.status(mapped.status(), throwable.getCause().getMessage());
		}
=======

		return ExceptionHandler.resolve(throwable);
	}
	
	@Override
	public Result onHandlerNotFound(RequestHeader requestHeader) {
		
		Logger.info("JCertif Backend onHandlerNotFound Global Handler");
		
		putResponseStatusInCoockieIfNecessary(Http.Status.NOT_FOUND);
>>>>>>> [Service]: Rajout dans l'action JCertifContextAction de la gestion des
		
		return Results.notFound();
	}
	
	/**
	 * @param result
	 */
	private void putResponseStatusInCoockieIfNecessary(int httpStatus){
		if(!Play.isProd()){
			Http.Context.current().session().put("status", Integer.toString(httpStatus));
		}
	}
}
