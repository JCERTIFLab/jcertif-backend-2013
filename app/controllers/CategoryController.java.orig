package controllers;


import models.objects.Category;
import models.objects.Session;
import models.objects.SessionStatus;
import models.objects.access.CategoryDB;
<<<<<<< HEAD
import models.objects.access.SessionDB;
import models.objects.access.SessionStatusDB;
import models.util.Tools;
import play.Logger;
import play.mvc.Http;
=======

import org.codehaus.jackson.JsonNode;

>>>>>>> [Service]: Propagation annotation JCertifContext à la classe
import play.mvc.Result;

import com.mongodb.util.JSON;

public class CategoryController extends AbstractController {

	@JCertifContext(admin=false,bodyParse=false)
    public static Result list() {
        allowCrossOriginJson();
        return ok(JSON.serialize(CategoryDB.getInstance().list()));
    }

    @JCertifContext
    public static Result newCategory() {
    	JsonNode jsonNode = request().body().asJson();
		
    	Category category = new Category(jsonNode.findPath("label").getTextValue());
		
    	category.add();
		return ok(JSON.serialize("Ok"));
    }

    @JCertifContext
    public static Result removeCategory() {
<<<<<<< HEAD
        allowCrossOriginJson();

        try {
            checkAdmin();
        } catch (JCertifException jcertifException) {
            Logger.info("access rejected for non-administrator");
            return forbidden(jcertifException.getMessage());
        }

        Http.RequestBody requestBody = request().body();
        try {
            Tools.verifyJSonRequest(requestBody);
        } catch (JCertifException e) {
            return badRequest(e.getMessage());
        }
        
        String categoryObjInJSONForm = requestBody.asJson().toString();
        Category category;

        try{
            category = new Category((BasicDBObject) JSON.parse(categoryObjInJSONForm));
        }catch(JSONParseException exception){
            return badRequest(categoryObjInJSONForm);
        }

        try {
            CategoryDB.getInstance().remove(category);
        } catch (JCertifException jcertifException) {
            return internalServerError(jcertifException.getMessage());
        }
        Logger.info("Category '" + category.getLabel() + "' removed");

        return ok(JSON.serialize("Ok"));
=======
    	JsonNode jsonNode = request().body().asJson();
		
    	Category category = new Category(jsonNode.findPath("label").getTextValue());
		
    	category.remove();
		return ok(JSON.serialize("Ok"));
>>>>>>> [Service]: Propagation annotation JCertifContext à la classe
    }
}
